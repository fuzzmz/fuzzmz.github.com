<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>QWERTY - fast keystrokes</title><link>http://qwerty.fuzz.me.uk</link><description></description><atom:link href="http://qwerty.fuzz.me.uk/feeds/linux.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 20 Jan 2012 03:38:00 +0000</lastBuildDate><item><title>Up, up, backup!</title><link>http://qwerty.fuzz.me.uk/backups.html</link><description>&lt;p&gt;As I was saying at the end of the last post, locking myself out of the server really made me want to have implemented my backup mechanism sooner, especially considering that at this point in the life of QWERTY (my VPS) there isn't that much to back up.&lt;/p&gt;
&lt;p&gt;In short, my backup needs are simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Archive the important data:&lt;ul&gt;
&lt;li&gt;IRC bouncer logs&lt;/li&gt;
&lt;li&gt;git repositories&lt;/li&gt;
&lt;li&gt;configuration settings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upload the archive to a remote server;&lt;/li&gt;
&lt;li&gt;Repeat 1. and 2. daily.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Archiving the data&lt;/h2&gt;
&lt;p&gt;This is a really simple bash script which creates a .tar.gz archive of the folders I specify. I could further improve the script by making it do incremental backups instead of creating a new archive each day, but considering that this is a fast and dirty version of it, and that I don't have that much stuff to back up, it'll do for now.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
date
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;############### Backing up files on the system... ###############&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;backupfilename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;server_file_backup_&lt;span class="sb"&gt;`&lt;/span&gt;date &lt;span class="s1"&gt;&amp;#39;+%Y-%m-%d&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;----- Now tar, then zip up all files to be saved -----&amp;quot;&lt;/span&gt;
tar cvf /home/backup/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;backupfilename&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar /home/logs/* /home/stats/pisg.cfg /home/gugu/.znc/configs/znc.conf /home/repos/*
gzip /home/backup/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;backupfilename&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar
rm /home/backup/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;backupfilename&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar
chmod 755 /home/backup/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;backupfilename&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.tar.gz

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;############### Completed backing up system... ###############&amp;quot;&lt;/span&gt;
date
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The echo lines aren't really necessary, but I like having them there in case I run the script by hand for debugging purposes.&lt;/p&gt;
&lt;p&gt;What it does is create an archive named server_file_backup_$current-date and adds the folders and files specified on the line starting with &lt;em&gt;tar cvf&lt;/em&gt;. Well, better said it first creates a tar archive, then it gzips it and deletes the original .tar; this is another point where the script could be improved, but hey, it works OK right now.&lt;/p&gt;
&lt;p&gt;The archive is saved under &lt;strong&gt;/home/backup&lt;/strong&gt; and it is given all the rights except the capability for anyone to write to the file.&lt;/p&gt;
&lt;p&gt;Then all I have to do is make the script executable with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Uploading the archive(s)&lt;/h2&gt;
&lt;p&gt;A backup wouldn't really be a backup if it lives on the same system you're doing it on, now would it? Now, there are a couple of ways to move the data out, but I decided to simply FTP it out to the webserver which hosts my main blog.&lt;/p&gt;
&lt;p&gt;I initially tried the script using the built-in ftp utility but didn't manage to get it to work, so I looked around and settled for ncftp; debugging the problem would've been more interesting and a better learning experience but I wanted to get the backups up and running as soon as possible, so this will be a future exercise on my part.&lt;/p&gt;
&lt;p&gt;The script is a simple one which logs in to the remote server using a provided username and password and uploads all archives to a pre-specified directory.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ftp_user_name&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ftp_password&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ftp_server&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# local directory to pick up *.tar.gz file&lt;/span&gt;
&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/backup&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# remote directory to upload backup&lt;/span&gt;
&lt;span class="nv"&gt;BACKUPDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/back&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# upload file&lt;/span&gt;
ncftp -u&lt;span class="s2"&gt;&amp;quot;$USERNAME&amp;quot;&lt;/span&gt; -p&lt;span class="s2"&gt;&amp;quot;$PASSWORD&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$SERVER&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;cd $BACKUPDIR&lt;/span&gt;
&lt;span class="s"&gt;mput $FILE/*.tar.gz&lt;/span&gt;
&lt;span class="s"&gt;quit&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And after running the same &lt;strong&gt;chmod +x&lt;/strong&gt; on up.sh, ensuring it's executable, I've got a nice setup to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the backup archive;&lt;/li&gt;
&lt;li&gt;Upload it to the remote server.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;The magic of cron&lt;/h2&gt;
&lt;p&gt;Now all I have to do is make sure that the scripts run daily so that in case of something bad happening I don't have a lot of data missing. Of course, nothing really stops me running the scripts more often than that, but it's a nice trade-off between the size of the files and how much new data there is added.&lt;/p&gt;
&lt;p&gt;Linux has something very similar to the Windows Task Scheduler called cron; what it does is allows users to schedule jobs (commands or shell scripts) to run periodically at certain times or dates.&lt;/p&gt;
&lt;p&gt;In order for my scripts to run periodically I had to add them to the &lt;strong&gt;crontab&lt;/strong&gt; file, the configuration file for cron which tells it when the jobs need to be executed. To get to the list all I had to do was run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;crontab&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I just needed to add the jobs. I wanted to run the archiving script every night at 1am, and then at 1:30am the upload script. Why the 30 minute gap between the jobs? I want to have a margin of error in case I'll add to the script which makes the archive, or in case files get really large, so that I won't have the upload script try and run while the archive is being created.&lt;/p&gt;
&lt;p&gt;Anyway, the code for the jobs is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="sr"&gt;/home/&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="sr"&gt;/home/&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line tells cron that it has to run archive.sh every day at 1am and up.sh at 1:30am.&lt;/p&gt;
&lt;p&gt;And with this I have a backup system in place.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;To do&lt;/h2&gt;
&lt;p&gt;I know that things can be improved, and in no way do I say that this is perfect, but it suits my needs at this point in time.&lt;/p&gt;
&lt;p&gt;What can (and will be) improved upon are the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Making incremental backups&lt;/strong&gt; - This would mean that I'd set a specific day of the week to be the the full backup day,
                                     when everything gets archived, and then on every other day only the files that changed
                                     get updated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use built-in ftp client&lt;/strong&gt;  - Go back and check to see the reason why I couldn't get ftp to work properly so that I
                                     had to use ncftp instead.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I guess that's about it. In all honesty, if I had ssh access to another server I'd just use rsync for the backups, but seeing that I don't, this is the best method that came to mind.&lt;/p&gt;
&lt;p&gt;In the next post I'll most likely talk about git and how I've integrated it with Pelican.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serban Constantin</dc:creator><pubDate>Fri, 20 Jan 2012 03:38:00 +0000</pubDate><guid>http://qwerty.fuzz.me.uk/backups.html</guid><category>backup</category><category>ftp</category><category>archive</category></item><item><title>Lockout: no pass, no key</title><link>http://qwerty.fuzz.me.uk/locked-out.html</link><description>&lt;h2&gt;A foreword&lt;/h2&gt;
&lt;p&gt;As you may not know, I'm mostly a Microsoft tech junkie venturing into the wonderful world of Linux. I've visited this land from time to time, but never had the time or motivation to try and settle in, but all this is about to change as one of my New Years resolutions was to get my hands dirty in Linux.&lt;/p&gt;
&lt;p&gt;Every new beginning is a learning experience, and what better way to learn than from the mistakes made (and the process of trying to fix them)? With this, I bring you my first - and probably not last - embarrassing story.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The idea&lt;/h2&gt;
&lt;p&gt;The goal was noble: &lt;em&gt;try and make my VPS as secure as possible&lt;/em&gt;. And what better way to achieve this than to disable ssh password authentication, only allowing users to connect with public key authentication?&lt;/p&gt;
&lt;p&gt;In the end, it was simple! All I had to do was modify &lt;strong&gt;/etc/ssh/sshd_config&lt;/strong&gt; and add&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;PasswordAuthentication no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a restart of the ssh server all was good in the world.&lt;/p&gt;
&lt;p&gt;Heck, I was so happy that I managed to get everything running that I even made an excited tweet that would prove to be a bit too prescient for my taste.&lt;/p&gt;
&lt;p align="center"&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Finally managed to get git to behave. I feel so victorious I'd reinstall the server just to do it again. Which reminds me, need backups.&lt;/p&gt;&amp;mdash; Serban Constantin (@fuzzmz) &lt;a href="https://twitter.com/fuzzmz/status/159357579846365185" data-datetime="2012-01-17T19:33:00+00:00"&gt;January17, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;h2&gt;The catalyst&lt;/h2&gt;
&lt;p&gt;Every time I logged in, the working directory was &lt;strong&gt;/root&lt;/strong&gt; (and yes, I know that I shouldn't use root for my day to day business, but hey, that's why I disabled password authentication) and yet all of my work was done in &lt;strong&gt;/home&lt;/strong&gt;. This in turn lead to a very frustrated Fuzz who sought to fix his problem.&lt;/p&gt;
&lt;p&gt;I mean, it couldn't be that hard to change the login directory, would it? Heck, Linux even gives you a simple way to do it through&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;usermod -d newdir loginname
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So all I had to do was to run &lt;em&gt;usermod -d /home root&lt;/em&gt; and I'd be set. Little did I know that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there is an additional parameter, &lt;em&gt;-m&lt;/em&gt; which moves the contents of the old dir to the new one (*cough* *cough*);&lt;/li&gt;
&lt;li&gt;you can't run the command for the user you're currently logged in with.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This meant that I had to search for an alternative: it was changing the directory directly in the &lt;strong&gt;/etc/passwd&lt;/strong&gt; file, and so I did.&lt;/p&gt;
&lt;p&gt;And things were good!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;There are no keys to this castle&lt;/h2&gt;
&lt;p&gt;A short time passes after changing the passwd file and I decide to do a logout and log back in.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Permission&lt;/span&gt; &lt;span class="n"&gt;denied&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publickey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, this isn't good, this isn't good at all!&lt;/p&gt;
&lt;p&gt;Remember that -m I told you about? Yeah, the one that moves the contents of the old login directory to the new one; well, one of the things it moves is the &lt;strong&gt;.ssh&lt;/strong&gt; folder which contains the authorized_keys file.&lt;/p&gt;
&lt;p&gt;What's so special about that file? Well, it holds the list of rsa keys which are allowed to access the server. Think of them as the keys that open your house door in the absence of people inside (the password, which I disabled) to open the door for you.&lt;/p&gt;
&lt;p&gt;In short:&lt;/p&gt;
&lt;p align="center"&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just as I got everything running the way I wanted I managed to lock myself out of the server. Fucking piece of shit!&lt;/p&gt;&amp;mdash; Serban Constantin (@fuzzmz) &lt;a href="https://twitter.com/fuzzmz/status/159371687379484675" data-datetime="2012-01-17T20:29:00+00:00"&gt;January17, 2012&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Fortunately, while bitching on Twitter about the whole situation &lt;a href="http://twitter.com/Kephu"&gt;Keph&lt;/a&gt; reminds me that I still have access to the server... somewhat.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;IRC bouncer to the rescue!&lt;/h2&gt;
&lt;p&gt;One of the purposes of that VPS is to run &lt;a href="http://wiki.znc.in"&gt;ZNC&lt;/a&gt;, an IRC bouncer which has some nice capabilities, one of them being a module called &lt;em&gt;shell&lt;/em&gt; which allow you to type commands into a query as if it were a terminal.&lt;/p&gt;
&lt;p&gt;"Yay, I am saved!" thought I, without realizing that I had ZNC run under a non-admin account, exactly because of the shell module. The reasoning is that in case someone hacks my IRC password they won't be able to do any damage as, either by loging in the server directly through ssh or via the shell module.&lt;/p&gt;
&lt;p&gt;On the upside, even though I couldn't do much I could at least write an authorized_keys file for that user and get ssh access to the server; this in turn meant that I could back up a portion of my data in case I had to reinstall the server.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Admin panel? What admin panel?&lt;/h2&gt;
&lt;p&gt;Of course, people both in IRC and on Twitter told me to see if I can get access to the server via the admin panel provided by the VPS host. Fortunately for me, they did indeed provide such access via a serial console.&lt;/p&gt;
&lt;p&gt;&lt;img style="float:left; padding-right:10px" src="/images/magic-button.PNG" /&gt;&lt;/p&gt;
&lt;p&gt;I had seen this magic button and tried it even before embarking on the amazing IRC-hackathon journey, I, in my eternal wisdom, decided to replace the default username in the dialogue that popped up when I pressed it with root, which in turn led me to the same "Permission denied(publickey)" error message.&lt;/p&gt;
&lt;p&gt;This time though, this time it would be different! This time I would leave the default username and gaze upon the wonders of&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;root@qwerty:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, I was in and victorious!&lt;/p&gt;
&lt;p&gt;I quickly created a .ssh/authorized_keys file under my new login directory and started working on my backup strategy.&lt;/p&gt;
&lt;p&gt;But about that, in the next blog update.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serban Constantin</dc:creator><pubDate>Thu, 19 Jan 2012 23:52:00 +0000</pubDate><guid>http://qwerty.fuzz.me.uk/locked-out.html</guid><category>Linux</category><category>d'oh</category></item></channel></rss>