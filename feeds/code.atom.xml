<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>QWERTY - fast keystrokes</title><link href="/" rel="alternate"></link><link href="http://fuzz.me.uk/feeds/code.atom.xml" rel="self"></link><id>/</id><updated>2012-11-19T19:46:18+02:00</updated><entry><title>Bip to Energymech IRC log converter</title><link href="/bip-to-energymech.html" rel="alternate"></link><updated>2012-11-19T19:46:18+02:00</updated><author><name>Serban Constantin</name></author><id>tag:,2012-11-19:bip-to-energymech.html</id><summary type="html">&lt;p&gt;The great thing about knowing how to code is being able to build things that help you out.&lt;/p&gt;
&lt;p&gt;I've recently had to convert some IRC logs from the &lt;a href="http://bip.milkypond.org/"&gt;Bip&lt;/a&gt; format to the Energymech format used by &lt;a href="http://wiki.znc.in/"&gt;ZNC&lt;/a&gt; in order to be able to then generate some statistics from them using &lt;a href="http://pisg.sourceforge.net/"&gt;pisg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My first approach was to hack together some macros and just plow through the logs (fortunately there weren't that many), but this had several downsides:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;by using macros I had to take out certain data which could be used to generate statistics&lt;/li&gt;
&lt;li&gt;it's a manual job and doesn't scale well time-wise, despite being able to automate it to some extent&lt;/li&gt;
&lt;li&gt;can't be easily shared with others&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After finishing parsing the logs I decided that it's best to make a learning experience out of it and code a Python script that goes through all the logs and generates the correct output; I knew it wasn't a difficult task (heck, I've thrown it together in around 3 hours of coding and debugging overall) so all I had to do was get cracking.&lt;/p&gt;
&lt;p&gt;The largest issue I had with it was regarding the way Python handles regex substitution.&lt;/p&gt;
&lt;blockquote class="twitter-tweet tw-align-center"&gt;&lt;p&gt;Whoever makes me understand why this Python regex substitution doesn't work gets a cookie and my eternal gratitude. &lt;a href="http://t.co/fj8Nn6i4" title="http://bit.ly/GP8lM3"&gt;bit.ly/GP8lM3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Serban Constantin (@fuzzmz) &lt;a href="https://twitter.com/fuzzmz/status/184431795746516992" data-datetime="2012-03-27T00:09:01+00:00"&gt;March 27, 2012&lt;/a&gt;&lt;/blockquote&gt;

&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Thanks to the great wonder that is the Internet I could get an answer to my question in a couple of hours and continue on my marry way.&lt;/p&gt;
&lt;blockquote class="twitter-tweet tw-align-center"&gt;&lt;p&gt;D'oh, strings in Python are immutable so my re.sub doesn't modify the string in place which means I need to, you know, save the result!&lt;/p&gt;&amp;mdash; Serban Constantin (@fuzzmz) &lt;a href="https://twitter.com/fuzzmz/status/184479937229627392" data-datetime="2012-03-27T03:20:19+00:00"&gt;March 27, 2012&lt;/a&gt;&lt;/blockquote&gt;

&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Another nice tip I got was to pre-compile the regex before going through the loop which speeds up things considerably when dealing with lots of text. It was as simple as a:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;talk_mask&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\!.*?\:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connect_mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\!.*?\has&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;quit_info&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\quit.*?\]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;find_nick&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\&amp;lt;* .*?\!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time_mask&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://github.com/fuzzmz/bip-to-energymech"&gt;Download&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I've of course made the code public. It can be found and downloaded from &lt;a href="https://github.com/fuzzmz/bip-to-energymech"&gt;GitHub&lt;/a&gt; which is also the place to report bugs or make suggestions.&lt;/p&gt;</summary><category term="irc"></category><category term="python"></category><category term="bip"></category><category term="energymech"></category><category term="log"></category><category term="log converter"></category></entry><entry><title>Enhanc... erm, extract!</title><link href="/extract-archive-recursively.html" rel="alternate"></link><updated>2012-11-19T19:46:18+02:00</updated><author><name>Serban Constantin</name></author><id>tag:,2012-11-19:extract-archive-recursively.html</id><summary type="html">&lt;p&gt;We've all been there, haven't we? We just downloaded the latest seaso... erm, Linux distro and it came with lots of folders which in turn contain lots of archives, one folder per episode. One way to do things is to just extract each episode... erm, distro, by hand, watch it, move to the next and so on.&lt;/p&gt;
&lt;p&gt;Another way would be to write a Windows batch script to make &lt;a href="www.7-zip.org/"&gt;7-zip&lt;/a&gt; go through all the archives and extract their contents, which means you run it once and end up with all the files out.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;/D&lt;/span&gt; &lt;span class="n"&gt;/r&lt;/span&gt; &lt;span class="nv"&gt;%%F&lt;/span&gt; in (&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;) &lt;span class="k"&gt;DO&lt;/span&gt; (
    pushd &lt;span class="nv"&gt;%CD%&lt;/span&gt;
    &lt;span class="k"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;%%F&lt;/span&gt;
        &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="nv"&gt;%%X&lt;/span&gt; in (*.rar *.zip) &lt;span class="k"&gt;DO&lt;/span&gt; (
            &lt;span class="s2"&gt;&amp;quot;C:\Program Files\7-zip\7z.exe&amp;quot;&lt;/span&gt; x &lt;span class="nv"&gt;%%X&lt;/span&gt;
        )
    popd
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that if you're running a 64bit OS but don't have the 64bit version of 7-zip installed you need to change "C:\Program Files\7-zip\7z.exe" x %%X into "C:\Program Files (x86)\7-zip\7z.exe" x %%X&lt;/p&gt;
&lt;p&gt;Launch the bat, and all rar's/zips will be extracted into the folder they are contained in.&lt;/p&gt;
&lt;p&gt;Now let's be helpful and dissect the script, shall we?&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;/D&lt;/span&gt; &lt;span class="n"&gt;/r&lt;/span&gt; &lt;span class="nv"&gt;%%F&lt;/span&gt; in (&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;) &lt;span class="k"&gt;DO&lt;/span&gt; (
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a simple for loop to go through all folders in the current directory, and put the path into a variable %%F.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;pushd &lt;span class="nv"&gt;%CD%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put the current directory into memory.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;%%F&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set the folder from variable %%F as the current directory.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="nv"&gt;%%X&lt;/span&gt; in (*.rar *.zip) &lt;span class="k"&gt;DO&lt;/span&gt; (
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For all the archives (rar and zip) in the current folder, do:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;C:\Program Files\7-zip\7z.exe&amp;quot;&lt;/span&gt; x &lt;span class="nv"&gt;%%X&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run 7-zip on the files with the extract parameter (basically call the command line version of 7-zip telling it to extract the current archive)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;popd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Return to the previous directory stored in memory.&lt;/p&gt;
&lt;p&gt;That's it! Pretty simple and efficient, isn't it?&lt;/p&gt;</summary><category term="7-zip"></category><category term="recursive"></category><category term="archives"></category><category term="bat"></category></entry></feed>